(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('highcharts'), require('tslib'), require('@angular/core')) :
	typeof define === 'function' && define.amd ? define(['exports', 'highcharts', 'tslib', '@angular/core'], factory) :
	(factory((global.ng = global.ng || {}, global.ng.highcharts = global.ng.highcharts || {}),global.Highcharts,global.tslib,global.ng.core));
}(this, (function (exports,Highcharts,tslib_1,_angular_core) { 'use strict';

var Chart = (function () {
    /**
     * @param {?} options
     */
    function Chart(options) {
        this.options = options;
        // init series array if not set
        if (!this.options.series) {
            this.options.series = [];
        }
    }
    /**
     * @param {?} point
     * @param {?=} serieIndex
     * @param {?=} redraw
     * @param {?=} shift
     * @return {?}
     */
    Chart.prototype.addPoint = function (point, serieIndex, redraw, shift) {
        if (serieIndex === void 0) { serieIndex = 0; }
        if (redraw === void 0) { redraw = true; }
        if (shift === void 0) { shift = false; }
        ((this.options.series[serieIndex].data)).push(point);
        if (this.ref) {
            this.ref.series[serieIndex].addPoint(point, redraw, shift);
        }
    };
    /**
     * @param {?} pointIndex
     * @param {?=} serieIndex
     * @return {?}
     */
    Chart.prototype.removePoint = function (pointIndex, serieIndex) {
        if (serieIndex === void 0) { serieIndex = 0; }
        // TODO add try catch (empty)
        ((this.options.series[serieIndex].data)).splice(pointIndex, 1);
        if (this.ref) {
            this.ref.series[serieIndex].removePoint(pointIndex, true);
        }
    };
    /**
     * @param {?} serie
     * @return {?}
     */
    Chart.prototype.addSerie = function (serie) {
        // init data array if not set
        if (!serie.data) {
            serie.data = [];
        }
        this.options.series.push(serie);
        if (this.ref) {
            this.ref.addSeries(serie);
        }
    };
    /**
     * @param {?} serieIndex
     * @return {?}
     */
    Chart.prototype.removeSerie = function (serieIndex) {
        // TODO add try catch (empty)
        this.options.series.splice(serieIndex, 1);
        if (this.ref) {
            this.ref.series[serieIndex].remove(true);
        }
    };
    return Chart;
}());

exports.ChartDirective = (function () {
    /**
     * @param {?} el
     */
    function ChartDirective(el) {
        this.el = el;
    }
    /**
     * @return {?}
     */
    ChartDirective.prototype.ngAfterViewInit = function () {
        this.init();
    };
    /**
     * @return {?}
     */
    ChartDirective.prototype.ngOnDestroy = function () {
        this.destroy();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ChartDirective.prototype.ngOnChanges = function (changes) {
        if (!changes['chart'].isFirstChange()) {
            this.destroy();
            this.init();
        }
    };
    /**
     * @return {?}
     */
    ChartDirective.prototype.init = function () {
        if (this.chart instanceof Chart) {
            this.chart.ref = Highcharts.chart(this.el.nativeElement, this.chart.options);
        }
    };
    /**
     * @return {?}
     */
    ChartDirective.prototype.destroy = function () {
        if (this.chart && this.chart.ref) {
            this.chart.ref.destroy();
            delete this.chart.ref;
        }
    };
    return ChartDirective;
}());
tslib_1.__decorate([
    _angular_core.Input(),
    tslib_1.__metadata("design:type", Chart)
], exports.ChartDirective.prototype, "chart", void 0);
exports.ChartDirective = tslib_1.__decorate([
    _angular_core.Directive({
        selector: '[chart]'
    }),
    tslib_1.__metadata("design:paramtypes", [_angular_core.ElementRef])
], exports.ChartDirective);

exports.ChartModule = (function () {
    function ChartModule() {
    }
    return ChartModule;
}());
exports.ChartModule = tslib_1.__decorate([
    _angular_core.NgModule({
        exports: [exports.ChartDirective],
        declarations: [exports.ChartDirective],
    })
], exports.ChartModule);

exports.Highcharts = Highcharts;
exports.Chart = Chart;

Object.defineProperty(exports, '__esModule', { value: true });

})));
